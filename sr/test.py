# coding:utf-8

class A(object):
    def __init__(self):
        self.__private()
        self.public()
    def __private(self):
        print('A.__private()')
    def public(self):
        print('A.public()')
class B(A):

    def __init__(self):
        self.__private()
    def __private(self):
        print('B.__private()')
    def public(self):
        print('B.public()')
class C(B):
    def __private(self):
        print('C.__private()')
    def public(self):
        print('C.public()')
# c = C()


# h = b"get_peers"
# print(h)
# print(type(h))
# print(type(h.decode()))
#
# import queue
#
# q = queue.Queue()
# print(q.qsize())
#
# l = (1111, 333)
# print(l)

# from hashlib import sha1
# from random import randint
# def random_id():
#     h = sha1()
#     h.update(entropy(20).encode(encoding="utf-8"))
#     return h.digest()
# def entropy(length):
#     return "".join(chr(randint(0, 255)) for _ in range(length))
# h = entropy(20)
# print(h)
# print(type(h))
# h = sha1()
# h.update(entropy(20).encode(encoding="utf-8"))
# print(h.digest())
# print(type(h.digest()))
#
# bt_header = chr(len("fff")) + "fff"
# ext_bytes = "\x00\x00\x00\x00\x00\x10\x00\x00"
# som = bt_header + ext_bytes
# print(som)
# print(len(som.encode(encoding="utf-8")))

#
# from bencode import bencode, bdecode
#
# print(type(bencode("u")))
# l = (chr(21) + chr(34))+bencode("u").decode("utf-8")
# print(l)
# print(l)
# print(type(l))
# print(type(chr(21)))

# a = "d1:ad2:id20:\na\x08\x11\x9dH\xe0\xb4\xd73;\xee\xe2m\xb38\xb2'#\x8a9:info_hash20:\x0e\xc8\x14\xd7\x9e\xb6A\x9a\xdc\x96FQ\x03i\xd5\xa5$Z\x0b\xf56:noseedi1ee1:q9:get_peers1:t2:\xe0\xd21:v4:LT\x01\x001:y1:qe"
# b= b"d1:ad2:id20:\na\x08\x11\x9dH\xe0\xb4\xd73;\xee\xe2m\xb38\xb2'#\x8a9:info_hash20:\x0e\xc8\x14\xd7\x9e\xb6A\x9a\xdc\x96FQ\x03i\xd5\xa5$Z\x0b\xf56:noseedi1ee1:q9:get_peers1:t2:\xe0\xd21:v4:LT\x01\x001:y1:qe"
# a = bytes(a, encoding="ISO-8859-1")
# print(b)
# b = str(b, encoding="ISO-8859-1")
# b = bytes(b, encoding="ISO-8859-1")
# print(b)
# msg = bdecode(a)
# print(msg)

# y = bencode({"m": {"ut_metadata": 1}}).decode("utf-8")
# l = bin(27).replace("0b", "")
# print(bytes(l, encoding="utf-8"))
# print(l.encode("utf-8"))
# print(l)
# import chardet
import binascii
# k=b'd1:ad2:id20:\xdas\x8cH\xee\x9e\x1a\xb0\xbfL\xe8\xfc\xf6\x96{1\xd4\xca\xb8*9:info_hash20:\x8d\xad\xa6\xb2@\xae{\xc97\x9b/\xf9\xd7\xb0\x87\xd8\x80mi\xbee1:q9:get_peers1:t8:?\xce\x04\x04\x8e\x90\xac\xb01:y1:qe'
# def custom_decoder(field_type, value):
#     if field_type == "key":
#         return str(value, "ascii")
#     elif field_type == "value":
#         try:
#             return str(value, "utf-8")
#         except:
#             # return str(value, encoding="ISO-8859-1")
#             return bytes(value)
#     else:
#         raise Exception("'field_type' can pass only 'key' and 'value' values")
# print(bdecode(k ,decoder=custom_decoder))
#
#
# print(str(binascii.b2a_hex(b'\xdas\x8cH\xee\x9e\x1a\xb0\xbfL\xe8\xfc\xf6\x96{1\xd4\xca\xb8*'))[2:-1])

g =  b'\xd2.\xf8\xd5\x1b\xf9\xedU\x81\x9eh\xdd]E\xe7\x10\x85{e\xc2\xa9\xebD\x98\xe2\xe2oh\x9dr Ki\xb1\x1e\xd3\x95\xa6\xbf]\xff\x04\xab\x96\xacA\x10qI?\xb2_9\x84?\xd0\x84\x93\xe4\xf74t/0F\x13\xf3\xd4\xd3i\x8e#O-r\x08\xc4\xca^\x03\x90=\xc7\xf7_"\x83\xb85\x13\x04\xf7U\xc1a\xea\xcc\x07 \xb0\x0f\x18\x98\xdatn\xf5\xbd\xf89\xd0\xa3\x91\x87\xf1\x15\xbe\xb4\xc8 1a\xc3\xfd\x0fx\x8e\xb0,\xe8Z\xb5n\x8e8o\xce\x90\x0cK\\\x91\xfa\xfb\xb3\x92\x8b\xa0\xcf\xc3\xc2\x05\xda#\xd6\xdeou\xbd"\\\xddc\xbf\x1a\x8e\'\xa8n\xe6\x8d\xa7\x1eT\xc1\x0e\xb4\xfdA]/RR\xccm\x03_;\x81}$(0\x8f\xe6Pt\x08U\x0c\x0eUd\xe32u\xa4\t\x99\xf6j\xabz\r\xa9@\xfe\xc7 \xc7\x8e5\xe0\x05)\xd8k\xc4\xfbu\x8d\xbcI\x15C\xab\xe7\xaf\xec\xed\x81\xabr\xea\xd18\xda\xaf\xef\xcc\xa4\xa9\x06\x86y\xc6.\x8a;\xff\xdeX\xa7\xa0\xcc\x17Y\xa5r\xb0\x01M\xcf\xa4vo\xa8\x89\x9c"\xae\xb7cO\xa1\x8b\xae\x0e\xd2l/\xeb!B\x9f\xf3{A\xf3\xc0\xfa\xce\xbd\x8b\xe1.v\x95\r"\x13\x00\xd9&\xabs\x0fPoC.1\xfa\xd6\xd2#\n\x87^X{7b\x1bEu\x9c#J\xab\x8f\xbd\x7f\xf1\xa86\x91\t\xe5\xe9{\x13\xe7t\xe2\xfa\'\xe3\x92$\xf0&\xd4iP\x86\x96\xfdZH\xa7\xf0d\xe4U7\xa9!\xae\x1e~TL\xbb\xbebT!\rZ9\x01\xd7\xcc \xff\xf9\xadN\x93\x8bEW4\t\xbc\xb3\xb6:P\x1c\xb0D\xbfuj\xd1\x8f\xd0O\xfd\xdc\x07\x0en\xc9\xc0Q\x16\\\x0b\xe8\xff\x80\x97j\x03\xb3R\x99;p\xbb*\x82\x1dox\xee\xc8\xe5\xfcqo\xc2c\xad:f\xe5\x9fz\x87R\xd2\xa5\xecN\xbdL\xcc\xb3(\xcd>I[\x85\x19\x8bx\x9b1\x07\xfb\xf3\xee\xbd\xae\xf0\x92bB\x01\xc3#ESZ\x01\xad\x96l\xbb\xe06p\xeb\xd2J\xc2\xc0\x00m\x9a\xe7\xfb%\x8cK\xbb\x83\xd3i\x84r\x18\xf0F\x1f8svC\x00\x0f\xaa\xa5\xfc\xc8@=\xb5\xbd\xd7\x8a\x84{\x0b&`:\xfdk\xeddH\x8b\xde^\xdb\xfb\xb8\xd2\x9f\xea\xca\xceO\xe0SX\xaaa\xc0\x0bK\x94c\xeb\xae6\xc4_\xa7_\xc7\xe1?\\r\x11b\t\x10Rn4"\xbb7\xc0\x8d\xbf\xf2\x8d\xa4\xe3\x17\x18eQ\xc3\xf94\xb1\xcd\xe5\xd0\xaa)\xd5\x7f%\xf4\xf1\xef\x08V_\x12l\xa0e\x15\xab>\xf0\xc3\x05\x1dx\x0c\xa66:\xd9JfVgS\x08j\xe7R\xf7\x03\x9f\x9c0\xd8\x0cF"\xa7\x1f\x90\x04M>Em\xdd+\xce\x9b\x1a\xac\xf1\xa7fU7\xdf\xa7\x82E\x17\x0f\x14\xb3\xc3(\r[&w\xc1\x17?\xdb\xd3;\xc4r\x13\xb7\x11z\x80\xb0\xaeG\x8a\xfd%\xc4s\x13"-\xdd\x1c\xab\xe9%q\xea\xe1\xe6\xc6\xe8y\x1dU\xa0\xc6\xcf\x84\xe9\xf5\x03\xd2\x0f!\xe3\xdc\xbbU\xfb\xf7\x98\xfc\xc8b\xf3@V\xcc\xce\xc3S)\x15\xd6C\x92\x84\xe3`\xb4\xb5\x83\x1f\x93\x8cmcz\xf2\xe5\xde.\x84\xeaOFD\x1e\xcb\xb7\xeaZ\xc0MAD\x8d&\xd1\xceS\xb3\\\xe1\xa9L\xdc\xba\xb4)=\xb7Wl\xd5\xc9\xbd\xed\x9fR\xb1\xe1/6\xb1w\x9e\xae\xdf|\xa2x\xb4@\x93\xf5\xea\x95\xfew\xdc\xc1\x8c\xcb9e\xf1n\xdd\xd6\xaf\xa4\x1d\xa3\x9cB\xefY{\x87\x96i\xe4p\xb3v\x0f\xb2\xc9\xa23\xc8e\x84\xa6)\x1eT\xf1\r^\x95\x85\xc4\x05\xa8O\xd7\xd2\x06Mc\x83\x9aw\xb4\xaf-p\xfd\x96[\xe2\x0eaT\x9f\x98o8W\x9f\xa6<\x8a\x8a0[i\xa3\x80\x1a\xda4\xfb\xc9\xfb\x8a\x11\xa3\xfc\x96V\x14\\c\x84\x18\x11\x9e]\xe0\xc1\x92\x03$\xcd\x01J\x82\xf0K\x1f\xb9/&p\x08\xb8\x10\xb7\xd7\x0e\x08f\xc0\xdc\xb9\xef\xcc>\xea*Q4\x80\xecK\xe5\x15\xe9\xfe\x11\x18\xe3V\x1a\x03\xcc\x81\xbf\xfc\n\xb8\xe4\x9f\xc7]vCr\xdc,"\x14}fF\xf2\xcaMn\xb3\xbam6\x17T\x9c\x9b\xb82'
print(g[g.index("e".encode("utf-8"))+2:])

h = b'\xb3\xef<@5\x08\xdeB\xc5\x11\xdb~\xd0A\n"V\xeb\xa00'
print(str(binascii.b2a_hex(h))[2:-1])
print(binascii.b2a_hex(h))
